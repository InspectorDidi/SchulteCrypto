// Driver.cpp : Defines the entry point for the console application.
//

#include "../AESLib/AES.h"
#include <stdio.h>

#pragma comment(lib, "AESLib.lib")

bool testAES( BYTE* input, DWORD inputSize, BYTE* key, DWORD keySize, BYTE* expectedCipherText );

int wmain(int argc, wchar_t* argv[])
{
	// APPENDIX B: Test 1
	{
		BYTE input[] = { 0x32, 0x43, 0xf6, 0xa8, 0x88, 0x5a, 0x30, 0x8d, 0x31, 0x31, 0x98, 0xa2, 0xe0, 0x37, 0x07, 0x34 };
		BYTE cipherKey[] = { 0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c };
		BYTE cipherText[] = { 0x39, 0x25, 0x84, 0x1d, 0x02, 0xdc, 0x09, 0xfb, 0xdc, 0x11, 0x85, 0x97, 0x19, 0x6a, 0x0b, 0x32 };
		if( testAES( input, sizeof( input ), cipherKey, sizeof( cipherKey ), cipherText ) )
		{
			puts( "APPENDIX B: Test 1 Success!" );
		}
		else
		{
			puts( "APPENDIX B: Test 1 ___FAILED___!" );
		}
	}

	// C.1 AES-128
	{
		BYTE input[] = { 0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff };
		BYTE cipherKey[] = { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f };
		BYTE cipherText[] = { 0x69, 0xc4, 0xe0, 0xd8, 0x6a, 0x7b, 0x04, 0x30, 0xd8, 0xcd, 0xb7, 0x80, 0x70, 0xb4, 0xc5, 0x5a };
		if( testAES( input, sizeof( input ), cipherKey, sizeof( cipherKey ), cipherText ) )
		{
			puts( "APPENDIX C.1: Test AES-128 Success!" );
		}
		else
		{
			puts( "APPENDIX C.1: Test AES-128 ___FAILED___!" );
		}
	}

	// C.1 AES-192
	{
		BYTE input[] = { 0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff };
		BYTE cipherKey[] = { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
			0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17 };
		BYTE cipherText[] = { 0xdd, 0xa9, 0x7c, 0xa4, 0x86, 0x4c, 0xdf, 0xe0, 0x6e, 0xaf, 0x70, 0xa0, 0xec, 0x0d, 0x71, 0x91 };
		if( testAES( input, sizeof( input ), cipherKey, sizeof( cipherKey ), cipherText ) )
		{
			puts( "APPENDIX C.2: Test AES-192 Success!" );
		}
		else
		{
			puts( "APPENDIX C.2: Test AES-192 ___FAILED___!" );
		}
	}

	// C.1 AES-256
	{
		BYTE input[] = { 0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff };
		BYTE cipherKey[] = { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
			0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f };
		BYTE cipherText[] = { 0x8e, 0xa2, 0xb7, 0xca, 0x51, 0x67, 0x45, 0xbf, 0xea, 0xfc, 0x49, 0x90, 0x4b, 0x49, 0x60, 0x89 };
		if( testAES( input, sizeof( input ), cipherKey, sizeof( cipherKey ), cipherText ) )
		{
			puts( "APPENDIX C.3: Test AES-256 Success!" );
		}
		else
		{
			puts( "APPENDIX C.3: Test AES-256 ___FAILED___!" );
		}
	}

	return 0;
}

bool testAES( BYTE* input, DWORD inputSize, BYTE* key, DWORD keySize, BYTE* expectedCipherText )
{
	AES a;
	a.setKey( key, (unsigned char) keySize );

	BYTE* myInput = new BYTE[inputSize + 16];
	DWORD myInputSize = inputSize + 16;
	memcpy( myInput, input, inputSize );

	// Encrypt
	if( !a.encrypt( myInput, inputSize, myInputSize, false ) )
		return false;
	if( memcmp( myInput, expectedCipherText, inputSize ) != 0 )
		return false;

	// Decrypt
	if( !a.decrypt( myInput, myInputSize, false ) )
		return false;
	if( memcmp( myInput, input, inputSize ) != 0 )
		return false;

	return true;
}

