// Driver.cpp : Defines the entry point for the console application.
//

#include "../AESLib/AES.h"

#include "../RSALib/RSAKey.h"
#include "../RSALib/RSAPublicKey.h"

#include <stdio.h>

#pragma comment(lib, "AESLib.lib")
#pragma comment(lib, "RSALib.lib")

#define MSG_SUC "Success!"
#define MSG_FAL "___FAILED___!"

bool testAES( BYTE* input, DWORD inputSize, BYTE* key, DWORD keySize, BYTE* expectedCipherText, bool cbcMode = false, BYTE* initVector = NULL );

int wmain(int argc, wchar_t* argv[])
{
	BYTE chars[] = "Man is distinguished, not only by his reason, but by this singular passion from other animals, which is a lust of the mind, that by a perseverance of delight in the continued and indefatigable generation of knowledge, exceeds the short vehemence of any carnal pleasure.";
	char* encoded;
	DWORD encodedSize;

	RSAPublicKey k;
	k.base64Encode( chars, sizeof( chars ) - 1, encoded, encodedSize );

	BYTE* decoded;
	DWORD decodedSize;
	k.base64Decode( encoded, encodedSize, decoded, decodedSize );
	return 0;

	// APPENDIX B: Test 1
	{
		BYTE input[] = { 0x32, 0x43, 0xf6, 0xa8, 0x88, 0x5a, 0x30, 0x8d, 0x31, 0x31, 0x98, 0xa2, 0xe0, 0x37, 0x07, 0x34 };
		BYTE cipherKey[] = { 0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c };
		BYTE cipherText[] = { 0x39, 0x25, 0x84, 0x1d, 0x02, 0xdc, 0x09, 0xfb, 0xdc, 0x11, 0x85, 0x97, 0x19, 0x6a, 0x0b, 0x32 };
		if( testAES( input, sizeof( input ), cipherKey, sizeof( cipherKey ), cipherText ) )
		{
			puts( "APPENDIX B: Test 1 Success!" );
		}
		else
		{
			puts( "APPENDIX B: Test 1 ___FAILED___!" );
		}
	}

	// C.1 AES-128
	{
		BYTE input[] = { 0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff };
		BYTE cipherKey[] = { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f };
		BYTE cipherText[] = { 0x69, 0xc4, 0xe0, 0xd8, 0x6a, 0x7b, 0x04, 0x30, 0xd8, 0xcd, 0xb7, 0x80, 0x70, 0xb4, 0xc5, 0x5a };
		if( testAES( input, sizeof( input ), cipherKey, sizeof( cipherKey ), cipherText ) )
		{
			puts( "APPENDIX C.1: Test AES-128 Success!" );
		}
		else
		{
			puts( "APPENDIX C.1: Test AES-128 ___FAILED___!" );
		}
	}

	// C.1 AES-192
	{
		BYTE input[] = { 0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff };
		BYTE cipherKey[] = { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
			0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17 };
		BYTE cipherText[] = { 0xdd, 0xa9, 0x7c, 0xa4, 0x86, 0x4c, 0xdf, 0xe0, 0x6e, 0xaf, 0x70, 0xa0, 0xec, 0x0d, 0x71, 0x91 };
		if( testAES( input, sizeof( input ), cipherKey, sizeof( cipherKey ), cipherText ) )
		{
			puts( "APPENDIX C.2: Test AES-192 Success!" );
		}
		else
		{
			puts( "APPENDIX C.2: Test AES-192 ___FAILED___!" );
		}
	}

	// C.1 AES-256
	{
		BYTE input[] = { 0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff };
		BYTE cipherKey[] = { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
			0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f };
		BYTE cipherText[] = { 0x8e, 0xa2, 0xb7, 0xca, 0x51, 0x67, 0x45, 0xbf, 0xea, 0xfc, 0x49, 0x90, 0x4b, 0x49, 0x60, 0x89 };
		if( testAES( input, sizeof( input ), cipherKey, sizeof( cipherKey ), cipherText ) )
		{
			puts( "APPENDIX C.3: Test AES-256 Success!" );
		}
		else
		{
			puts( "APPENDIX C.3: Test AES-256 ___FAILED___!" );
		}
	}

	/************************************************************************
	 ******** AES CBC: https://tools.ietf.org/html/rfc3602#section-2 ********
	 AES Test Vectors: http://www.inconteam.com/software-development/41-encryption/55-aes-test-vectors
	 ***********************************************************************/

	// AES CBC 128-bit:
	{
		printf( "Test 1.1: AES CBC 128-bit - " );
		BYTE input[] = { 0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96, 0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93, 0x17, 0x2a };
		BYTE initVector[] = { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F };
		BYTE cipherKey[] = { 0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c };
		BYTE cipherText[] = { 0x76, 0x49, 0xab, 0xac, 0x81, 0x19, 0xb2, 0x46, 0xce, 0xe9, 0x8e, 0x9b, 0x12, 0xe9, 0x19, 0x7d };
		if( testAES( input, sizeof( input ), cipherKey, sizeof( cipherKey ), cipherText, true, initVector ) )
		{
			puts( MSG_SUC );
		}
		else
		{
			puts( MSG_FAL );
		}
	}

	// AES CBC 192-bit:
	{
		printf( "Test 2.1: AES CBC 192-bit - " );
		BYTE input[] = { 0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96, 0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93, 0x17, 0x2a };
		BYTE initVector[] = { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F };
		BYTE cipherKey[] = { 0x8e, 0x73, 0xb0, 0xf7, 0xda, 0x0e, 0x64, 0x52, 0xc8, 0x10, 0xf3, 0x2b, 0x80, 0x90, 0x79, 0xe5,
			0x62, 0xf8, 0xea, 0xd2, 0x52, 0x2c, 0x6b, 0x7b };
		BYTE cipherText[] = { 0x4f, 0x02, 0x1d, 0xb2, 0x43, 0xbc, 0x63, 0x3d, 0x71, 0x78, 0x18, 0x3a, 0x9f, 0xa0, 0x71, 0xe8 };
		if( testAES( input, sizeof( input ), cipherKey, sizeof( cipherKey ), cipherText, true, initVector ) )
		{
			puts( MSG_SUC );
		}
		else
		{
			puts( MSG_FAL );
		}
	}

	// AES CBC 256-bit:
	{
		printf( "Test 2.1: AES CBC 256-bit - " );
		BYTE input[] = { 0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96, 0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93, 0x17, 0x2a };
		BYTE initVector[] = { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F };
		BYTE cipherKey[] = { 0x60, 0x3d, 0xeb, 0x10, 0x15, 0xca, 0x71, 0xbe, 0x2b, 0x73, 0xae, 0xf0, 0x85, 0x7d, 0x77, 0x81, 0x1f,
			0x35, 0x2c, 0x07, 0x3b, 0x61, 0x08, 0xd7, 0x2d, 0x98, 0x10, 0xa3, 0x09, 0x14, 0xdf, 0xf4 };
		BYTE cipherText[] = { 0xf5, 0x8c, 0x4c, 0x04, 0xd6, 0xe5, 0xf1, 0xba, 0x77, 0x9e, 0xab, 0xfb, 0x5f, 0x7b, 0xfb, 0xd6 };
		if( testAES( input, sizeof( input ), cipherKey, sizeof( cipherKey ), cipherText, true, initVector ) )
		{
			puts( MSG_SUC );
		}
		else
		{
			puts( MSG_FAL );
		}
	}

	return 0;
}

bool testAES( BYTE* input, DWORD inputSize, BYTE* key, DWORD keySize, BYTE* expectedCipherText, bool cbcMode /*= false*/, BYTE* initVector /*= NULL*/ )
{
	AES a;
	a.setKey( key, (unsigned char) keySize );

	DWORD commitSize = inputSize + 16 + (cbcMode ? 16 : 0);
	DWORD usedSize = inputSize;
	BYTE* myInput = new BYTE[commitSize];
	memcpy( myInput, input, inputSize );

	// Encrypt
	if( !a.encrypt( myInput, usedSize, commitSize, cbcMode, initVector ) )
		return false;
	if( memcmp( myInput + (cbcMode ? 16 : 0), expectedCipherText, inputSize ) != 0 )
		return false;

	// Decrypt
	if( !a.decrypt( myInput, usedSize, cbcMode ) )
		return false;
	if( memcmp( myInput, input, inputSize ) != 0 )
		return false;

	return true;
}

